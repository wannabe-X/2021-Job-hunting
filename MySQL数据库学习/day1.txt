MySQL day01课堂笔记

1.什么是数据库？什么是数据库管理系统？什么是SQL？他们之间的关系是什么？
	数据库：英文单词Database，简称DB；
	顾名思义，存储数据的仓库，实际上就是一堆文件，这些文件中存储了具有特定格式的数据
	数据库管理系统：DataBaseManagement，简称DBMS；
	数据库管理系统是专门用来管理数据库中的数据的，数据库管理系统可以对数据库当中的数据进行增删改查
	
	常见的数据库管理系统：
		MySQL、Oracle、MS SQLServer、DB2、Sybase等
	
	SQL：结构化查询语言
		程序员需要学习SQL语句，程序员通过编写SQL语句，然后DBMS负责执行SQL语句，
		最终来完成数据库中数据的增删改查
		
		SQL是一套标准，程序员主要学习SQL语句，这个SQL可以在MySQL中使用，
		同时Oracle、DB2中都可以使用
		
	三者之间的关系：
		DBMS->执行->SQL->操作->DB
	
	先安装数据库管理系统MySQL，然后学习SQL语句，编写SQL语句之后，DBMS对SQL语句进行执行，
	最终来完成数据库的数据管理

2.安装MySQL数据库管理系统
	第一步：先安装，选择经典版
	第二步：需要进行MySQL数据库实例配置
	注意：
		端口号：端口号port是任何一个软件/应用都会有的，端口号是应用的唯一代表
		端口号通常和IP地址在一块，IP地址用来定位计算机，端口号port用来定位某个服务/应用
		在同一台计算机上，端口号不能重复，具有唯一性
		MySQL数据库启动的时候，这个服务占有的默认端口号为3306
		
		字符编码方式：
			设置MySQL数据库的字符编码方式为uft8

3.MySQL数据库的卸载：
	第一步：双击安装包进行卸载
	第二步：删除目录

4.MySQL的服务
	计算机->右键->管理->服务和应用程序->服务->MySQL
	MySQL服务默认是启动状态，只有启动了MySQL才能用

5.在Windows操作系统中，如何启动和关闭MySQL服务
	语法：net stop 服务名称;
		  net start 服务名称;

6.MySQL安装了，服务启动，怎么使用客户端登录MySQL数据库？
	使用bin目录下的mysql.exe命令连接MySQL数据库服务器
	本地登录(显示编写密码的形式)：
		C:\WINDOWS\system32>mysql -uroot -p(密码)
		mysql: [Warning] Using a password on the command line interface can be insecure.
		Welcome to the MySQL monitor.  Commands end with ; or \g.
		Your MySQL connection id is 12
		Server version: 8.0.24 MySQL Community Server - GPL

		Copyright (c) 2000, 2021, Oracle and/or its affiliates.

		Oracle is a registered trademark of Oracle Corporation and/or its
		affiliates. Other names may be trademarks of their respective
		owners.

		Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

		mysql>
		
	本地登录(显示编写密码的形式)：
		C:\WINDOWS\system32>mysql -uroot -p
	 	Enter password: ************
		Welcome to the MySQL monitor.  Commands end with ; or \g.
		Your MySQL connection id is 14
		Server version: 8.0.24 MySQL Community Server - GPL

		Copyright (c) 2000, 2021, Oracle and/or its affiliates.

		Oracle is a registered trademark of Oracle Corporation and/or its
		affiliates. Other names may be trademarks of their respective
		owners.

		Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

		mysql>

7.mysql常用命令
	退出mysql：exit 或 \q
	查看mysql中有哪些数据库： 
		show databases;
		注意以英文分号结尾
		
		mysql> show databases;
		+--------------------+
		| Database           |
		+--------------------+
		| information_schema |
		| mysql              |
		| performance_schema |
		| sys                |
		| test               |
		+--------------------+
		5 rows in set (0.01 sec)
		
		mysql默认自带了四个数据库 information_schema mysql performance_schema sys
	
	选择当前要使用的数据库：
		mysql> use test;
		Database changed
		表示正在使用一个名字叫做test的数据库
	
	创建数据库：
		mysql> create database bjpowernode;
		Query OK, 1 row affected (0.01 sec)

		mysql> show databases;
		+--------------------+
		| Database           |
		+--------------------+
		| bjpowernode        |
		| information_schema |
		| mysql              |
		| performance_schema |
		| sys                |
		| test               |
		+--------------------+
		6 rows in set (0.00 sec)
	
	查看某个数据库下有哪些表：
		mysql> use bjpowernode;
		Database changed
		mysql> show tables;
		Empty set (0.01 sec)
	
	查看mysql数据库的版本号:
	mysql> select version();
	+-----------+
	| version() |
	+-----------+
	| 8.0.24    |
	+-----------+
	1 row in set (0.00 sec)
	
	查看当前正在使用的数据库：
	mysql> select database();
	+-------------+
	| database()  |
	+-------------+
	| bjpowernode |
	+-------------+
	1 row in set (0.00 sec)
	
	注意：mysql不见分号不执行
	
	终止当前命令的输入用\c
	mysql> show
    ->
    ->
    -> \c
	mysql>
	
	
	注意：以上的命令不区分大小写，都可以
	
8.数据库当中最基本的单元是表(table)
	什么是表table？为什么用表来存储数据
	
	数据库中是以表格的形式表示数据的
	
	任何一张表都有行和列：
		行row：被称为数据/记录
		列column：被称为字段
	姓名字段、性别字段、年龄字段... 每个字段都有：字段名 数据类型 约束等属性
	字段名可以理解，是一个普通的名字，见名知意
	数据类型：字符串 数字 日期等
	约束：约束也有很多，其中一个叫做唯一性约束，
		在这种约束添加以后，该字段的数据就不能重复

9.关于SQL语句的分类：
	SQL语句有很多，最好分门别类，容易记忆
		分为：
			DQL:数据查询语言(凡是带有select关键字的都是查询语句)
				select...
			DML:数据操作语言(凡是对表当中的数据进行增删改的都是DML)
				insert delete update
				insert 增
				delete 删
				update 改
				这些命令主要是操作表中的数据data
			DDL:数据定义语言(凡是带有create、drop、alter的都是DDL)
				DDL主要操作的是表的结构，不是表中的数据
				create:增
				drop:删
				alter:改
				这些命令增删改与DML不同，这个主要是对表结构进行操作
			TCL:事务控制语言
				包括：
					事务提交：commit
					事务回滚：rollback
			DCL:数据控制语言
				例如：授权grant、撤销授权revoke

10.导入提前准备好的数据
	bjpowernode.sql
	导入数据source
	mysql> source F:\Toolkit\Backup\bjpowernode.sql
	
	注意：路径中不要有中文

11.关于导入的这几张表？
	mysql> show tables;
	+-----------------------+
	| Tables_in_bjpowernode |
	+-----------------------+
	| dept                  |
	| emp                   |
	| salgrade              |
	+-----------------------+
	3 rows in set (0.01 sec)
	
	dept 部门表
	emp 员工表
	salgrade 工资等级表
	
	查看表中的数据？
	select * from 表名; // 统一执行这个SQL语句
	mysql> select * from emp; // 从emp表查询所有数据
	+-------+--------+-----------+------+------------+---------+---------+--------+
	| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
	+-------+--------+-----------+------+------------+---------+---------+--------+
	|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |
	|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
	|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
	|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |
	|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
	|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |
	|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |
	|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |
	|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |
	|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
	|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |
	|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |
	|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |
	|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |
	+-------+--------+-----------+------+------------+---------+---------+--------+
	14 rows in set (0.00 sec)
	
	mysql> select * from dept;
	+--------+------------+----------+
	| DEPTNO | DNAME      | LOC      |
	+--------+------------+----------+
	|     10 | ACCOUNTING | NEW YORK |
	|     20 | RESEARCH   | DALLAS   |
	|     30 | SALES      | CHICAGO  |
	|     40 | OPERATIONS | BOSTON   |
	+--------+------------+----------+
	4 rows in set (0.00 sec)
	
	mysql> select * from salgrade;
	+-------+-------+-------+
	| GRADE | LOSAL | HISAL |
	+-------+-------+-------+
	|     1 |   700 |  1200 |
	|     2 |  1201 |  1400 |
	|     3 |  1401 |  2000 |
	|     4 |  2001 |  3000 |
	|     5 |  3001 |  9999 |
	+-------+-------+-------+
	5 rows in set (0.00 sec)

12.不看表中的数据，只看表的结构，有一个命令
	desc 表名;
	describe 表名;
	
	mysql> desc dept;
	+--------+-------------+------+-----+---------+-------+
	| Field  | Type        | Null | Key | Default | Extra |
	+--------+-------------+------+-----+---------+-------+
	| DEPTNO | int         | NO   | PRI | NULL    |       | 部门编号
	| DNAME  | varchar(14) | YES  |     | NULL    |       | 部门名字
	| LOC    | varchar(13) | YES  |     | NULL    |       | 地理位置
	+--------+-------------+------+-----+---------+-------+
	3 rows in set (0.01 sec)
	
	mysql> desc emp;
	+----------+-------------+------+-----+---------+-------+
	| Field    | Type        | Null | Key | Default | Extra |
	+----------+-------------+------+-----+---------+-------+
	| EMPNO    | int         | NO   | PRI | NULL    |       | 员工编号
	| ENAME    | varchar(10) | YES  |     | NULL    |       | 员工姓名
	| JOB      | varchar(9)  | YES  |     | NULL    |       | 工作岗位
	| MGR      | int         | YES  |     | NULL    |       | 上级编号
	| HIREDATE | date        | YES  |     | NULL    |       | 入职日期
	| SAL      | double(7,2) | YES  |     | NULL    |       | 工资
	| COMM     | double(7,2) | YES  |     | NULL    |       | 补助
	| DEPTNO   | int         | YES  |     | NULL    |       | 部门编号
	+----------+-------------+------+-----+---------+-------+
	8 rows in set (0.00 sec)
	
	mysql> desc salgrade;
	+-------+------+------+-----+---------+-------+
	| Field | Type | Null | Key | Default | Extra |
	+-------+------+------+-----+---------+-------+
	| GRADE | int  | YES  |     | NULL    |       | 工资等级
	| LOSAL | int  | YES  |     | NULL    |       | 最低工资
	| HISAL | int  | YES  |     | NULL    |       | 最高工资
	+-------+------+------+-----+---------+-------+
	3 rows in set (0.00 sec)

13.简单查询 DQL
		1.查询一个字段
			select 字段名 from 表名;
			注意：select和from都是关键字，字段名和表名都是标识符
				对于所有的SQL语句，都是通用的，所有的SQL语句都是以";"结尾
				SQL语句不区分大小写，都行
			
			查询员工的名字
			mysql> select dname from dept;
			+------------+
			| dname      |
			+------------+
			| ACCOUNTING |
			| RESEARCH   |
			| SALES      |
			| OPERATIONS |
			+------------+
			4 rows in set (0.00 sec)
		2.查询两个字段，或多个字段
			使用逗号隔开","，查询部门编号和部门名
			mysql> select deptno,dname from dept;
			+--------+------------+
			| deptno | dname      |
			+--------+------------+
			|     10 | ACCOUNTING |
			|     20 | RESEARCH   |
			|     30 | SALES      |
			|     40 | OPERATIONS |
			+--------+------------+
			4 rows in set (0.00 sec)
		3.查询所有字段
			第一种方式：可以把所有字段都写上
				select a,b,s,c,d... from tablename; 
			第二种方式：可以使用*
				select * from tablename;
				
				mysql> select * from dept;
				+--------+------------+----------+
				| DEPTNO | DNAME      | LOC      |
				+--------+------------+----------+
				|     10 | ACCOUNTING | NEW YORK |
				|     20 | RESEARCH   | DALLAS   |
				|     30 | SALES      | CHICAGO  |
				|     40 | OPERATIONS | BOSTON   |
				+--------+------------+----------+
				4 rows in set (0.00 sec)
			第二种方式的缺点：效率低、可读性差
				在实际开发中不建议第二种方式，建议使用第一种方式
		4.查询的列起别名 as关键字
			mysql> select deptno,dname as deptname from dept;
			+--------+------------+
			| deptno | deptname   |
			+--------+------------+
			|     10 | ACCOUNTING |
			|     20 | RESEARCH   |
			|     30 | SALES      |
			|     40 | OPERATIONS |
			+--------+------------+
			4 rows in set (0.00 sec)
			使用as关键字起别名。
			注意：只是将显示的查询结果列名显示为deptname，原表列名还是dname
			记住：select语句是永远不会进行修改操作的(因为只负责查询)
			
			as关键字也可以省略，换成空格
			mysql> select deptno,dname deptname from dept;
			+--------+------------+
			| deptno | deptname   |
			+--------+------------+
			|     10 | ACCOUNTING |
			|     20 | RESEARCH   |
			|     30 | SALES      |
			|     40 | OPERATIONS |
			+--------+------------+
			4 rows in set (0.00 sec)
			
			假设起别名的时候，别名里面含有空格，例如DNAME->dept name
				mysql> select deptno,dname dept name from dept;
				DBMS看到这样的语句，进行SQL语句的编译，不符合语法，编译报错
				解决办法是给本身含有空格的别名使用单/双引号括起来
					mysql> select deptno,dname 'dept name' from dept;
					+--------+------------+
					| deptno | dept name  |
					+--------+------------+
					|     10 | ACCOUNTING |
					|     20 | RESEARCH   |
					|     30 | SALES      |
					|     40 | OPERATIONS |
					+--------+------------+
					4 rows in set (0.00 sec)
					
					mysql> select deptno,dname "dept name"  from dept;
					+--------+------------+
					| deptno | dept name  |
					+--------+------------+
					|     10 | ACCOUNTING |
					|     20 | RESEARCH   |
					|     30 | SALES      |
					|     40 | OPERATIONS |
					+--------+------------+
					4 rows in set (0.00 sec)
					
				注意：在所有的数据库当中，字符串统一使用单引号括起来。
					单引号是标准，双引号在Oracle数据库中用不了，但是在mysql中可以使用
					
				再次强调：数据库中字符串都是采用单引号括起来的，这是标准的。双引号是不标准的
		5.计算员工的薪资 sal * 12
			mysql> select ename,sal from emp;
			+--------+---------+
			| ename  | sal     |
			+--------+---------+
			| SMITH  |  800.00 |
			| ALLEN  | 1600.00 |
			| WARD   | 1250.00 |
			| JONES  | 2975.00 |
			| MARTIN | 1250.00 |
			| BLAKE  | 2850.00 |
			| CLARK  | 2450.00 |
			| SCOTT  | 3000.00 |
			| KING   | 5000.00 |
			| TURNER | 1500.00 |
			| ADAMS  | 1100.00 |
			| JAMES  |  950.00 |
			| FORD   | 3000.00 |
			| MILLER | 1300.00 |
			+--------+---------+
			14 rows in set (0.00 sec)
			
		直接让工资乘以12即可，但是字段名称变成了sal*12
			
			mysql> select ename,sal*12 from emp; // 结论：字段可以使用数学表达式
			+--------+----------+
			| ename  | sal*12   |
			+--------+----------+
			| SMITH  |  9600.00 |
			| ALLEN  | 19200.00 |
			| WARD   | 15000.00 |
			| JONES  | 35700.00 |
			| MARTIN | 15000.00 |
			| BLAKE  | 34200.00 |
			| CLARK  | 29400.00 |
			| SCOTT  | 36000.00 |
			| KING   | 60000.00 |
			| TURNER | 18000.00 |
			| ADAMS  | 13200.00 |
			| JAMES  | 11400.00 |
			| FORD   | 36000.00 |
			| MILLER | 15600.00 |
			+--------+----------+
			14 rows in set (0.00 sec)
			
		起别名，如果别名是中文，则使用单引号括起来，当做字符串处理
			mysql> select ename,sal*12 '年薪' from emp;
			+--------+----------+
			| ename  | 年薪     |
			+--------+----------+
			| SMITH  |  9600.00 |
			| ALLEN  | 19200.00 |
			| WARD   | 15000.00 |
			| JONES  | 35700.00 |
			| MARTIN | 15000.00 |
			| BLAKE  | 34200.00 |
			| CLARK  | 29400.00 |
			| SCOTT  | 36000.00 |
			| KING   | 60000.00 |
			| TURNER | 18000.00 |
			| ADAMS  | 13200.00 |
			| JAMES  | 11400.00 |
			| FORD   | 36000.00 |
			| MILLER | 15600.00 |
			+--------+----------+
			14 rows in set (0.00 sec)

14.条件查询 不是将表中所有数据都查出来，而是将符合条件的数据查询出来
	语法格式：
		select 
			字段1,字段2,字段3...
		from
			表名
		where
			条件;
	条件语句：
		1.=等于
		select * from 表 where 字段名='查询的字段值';
		注意:查询的字段值最好用''包裹
		
		例如：查询薪资等于800的员工姓名和编号
			mysql> select empno,ename from emp where sal='800';
			+-------+-------+
			| empno | ename |
			+-------+-------+
			|  7369 | SMITH |
			+-------+-------+
			1 row in set (0.00 sec)
			
		例如：查询SMITH的姓名、编号和薪资
			mysql> select empno,ename,sal from emp where ename='SMITH';
			+-------+-------+--------+
			| empno | ename | sal    |
			+-------+-------+--------+
			|  7369 | SMITH | 800.00 |
			+-------+-------+--------+
			1 row in set (0.00 sec)
		2.<>或!=不等于
		select * from 表 where 字段名<>'查询的字段值';
		select * from 表 where 字段名!='查询的字段值';
		
		例如：查询薪资不等于800的员工姓名和编号
			mysql> select ename,empno from emp where sal != '800';
			或
			mysql> select ename,empno from emp where sal <> '800';
			+--------+-------+
			| ename  | empno |
			+--------+-------+
			| ALLEN  |  7499 |
			| WARD   |  7521 |
			| JONES  |  7566 |
			| MARTIN |  7654 |
			| BLAKE  |  7698 |
			| CLARK  |  7782 |
			| SCOTT  |  7788 |
			| KING   |  7839 |
			| TURNER |  7844 |
			| ADAMS  |  7876 |
			| JAMES  |  7900 |
			| FORD   |  7902 |
			| MILLER |  7934 |
			+--------+-------+
			13 rows in set (0.00 sec)
			
		 
		3.<小于
		select * from 表 where 字段名<'查询的字段值';
		
		例如：查询薪资小于2000的员工姓名和编号、薪资
			mysql> select empno,ename,sal from emp where sal<'2000';
			+-------+--------+---------+
			| empno | ename  | sal     |
			+-------+--------+---------+
			|  7369 | SMITH  |  800.00 |
			|  7499 | ALLEN  | 1600.00 |
			|  7521 | WARD   | 1250.00 |
			|  7654 | MARTIN | 1250.00 |
			|  7844 | TURNER | 1500.00 |
			|  7876 | ADAMS  | 1100.00 |
			|  7900 | JAMES  |  950.00 |
			|  7934 | MILLER | 1300.00 |
			+-------+--------+---------+
			8 rows in set (0.00 sec)
		 
		4.<=小于等于
		select * from 表 where 字段名<='查询的字段值'; 
		
		例如：查询薪资小于等于5000的员工姓名和编号、薪资
			mysql> select empno,ename,sal from emp where sal<='5000';
			+-------+--------+---------+
			| empno | ename  | sal     |
			+-------+--------+---------+
			|  7369 | SMITH  |  800.00 |
			|  7499 | ALLEN  | 1600.00 |
			|  7521 | WARD   | 1250.00 |
			|  7566 | JONES  | 2975.00 |
			|  7654 | MARTIN | 1250.00 |
			|  7698 | BLAKE  | 2850.00 |
			|  7782 | CLARK  | 2450.00 |
			|  7788 | SCOTT  | 3000.00 |
			|  7839 | KING   | 5000.00 |
			|  7844 | TURNER | 1500.00 |
			|  7876 | ADAMS  | 1100.00 |
			|  7900 | JAMES  |  950.00 |
			|  7902 | FORD   | 3000.00 |
			|  7934 | MILLER | 1300.00 |
			+-------+--------+---------+
			14 rows in set (0.00 sec)
		 
		5.>大于
		select * from 表 where 字段名>查询的字段值';
		
		例如：查询薪资大于3000的员工姓名和编号、薪资
			mysql> select empno,ename,sal from emp where sal > '3000';
			+-------+-------+---------+
			| empno | ename | sal     |
			+-------+-------+---------+
			|  7839 | KING  | 5000.00 |
			+-------+-------+---------+
			1 row in set (0.00 sec)
		
		
		6.>=大于等于
		select * from 表 where 字段名>='查询的字段值';
		
		例如：查询薪资大于等于1000的员工姓名和编号、薪资
			mysql> select empno,ename,sal from emp where sal >= '1000';
			+-------+--------+---------+
			| empno | ename  | sal     |
			+-------+--------+---------+
			|  7499 | ALLEN  | 1600.00 |
			|  7521 | WARD   | 1250.00 |
			|  7566 | JONES  | 2975.00 |
			|  7654 | MARTIN | 1250.00 |
			|  7698 | BLAKE  | 2850.00 |
			|  7782 | CLARK  | 2450.00 |
			|  7788 | SCOTT  | 3000.00 |
			|  7839 | KING   | 5000.00 |
			|  7844 | TURNER | 1500.00 |
			|  7876 | ADAMS  | 1100.00 |
			|  7902 | FORD   | 3000.00 |
			|  7934 | MILLER | 1300.00 |
			+-------+--------+---------+
			12 rows in set (0.00 sec)
		
		7.between...and..两个值之间等同于>=and<= ，闭区间
		select * from 表 where 字段名 between 值1 and 值2;
		注意在查询的时候小值必须写在前面如果大值写在前面查询不到任何数据
		
		查询薪资大于1000且小于3000的员工姓名和编号、薪资
			mysql> select empno,ename,sal from emp where sal between '1000' and '3000';
			或
			select empno,ename,sal from emp where sal>'1000' and sal<'3000';
			+-------+--------+---------+
			| empno | ename  | sal     |
			+-------+--------+---------+
			|  7499 | ALLEN  | 1600.00 |
			|  7521 | WARD   | 1250.00 |
			|  7566 | JONES  | 2975.00 |
			|  7654 | MARTIN | 1250.00 |
			|  7698 | BLAKE  | 2850.00 |
			|  7782 | CLARK  | 2450.00 |
			|  7788 | SCOTT  | 3000.00 |
			|  7844 | TURNER | 1500.00 |
			|  7876 | ADAMS  | 1100.00 |
			|  7902 | FORD   | 3000.00 |
			|  7934 | MILLER | 1300.00 |
			+-------+--------+---------+
			11 rows in set (0.00 sec)
			
			注意：使用between...and...的时候，必须遵循左小右大的闭区间
		
		8.is null 为null(is not null 非空)
		SELECT * FROM 表 WHERE 字段名 IS  null;
		
		例如：查询哪些员工的津贴/补助为null
			mysql> select empno,ename,sal,comm from emp where comm is null;
			+-------+--------+---------+------+
			| empno | ename  | sal     | comm |
			+-------+--------+---------+------+
			|  7369 | SMITH  |  800.00 | NULL |
			|  7566 | JONES  | 2975.00 | NULL |
			|  7698 | BLAKE  | 2850.00 | NULL |
			|  7782 | CLARK  | 2450.00 | NULL |
			|  7788 | SCOTT  | 3000.00 | NULL |
			|  7839 | KING   | 5000.00 | NULL |
			|  7876 | ADAMS  | 1100.00 | NULL |
			|  7900 | JAMES  |  950.00 | NULL |
			|  7902 | FORD   | 3000.00 | NULL |
			|  7934 | MILLER | 1300.00 | NULL |
			+-------+--------+---------+------+
			10 rows in set (0.00 sec)
			
			注意：在数据库当中null不能使用等号进行衡量，需要使用is null
			因为数据库中的null代表什么也没有，它不是一个值，所以不能使用等号进行衡量
		
		例如：查询哪些员工的津贴/补助不为null
			mysql> select empno,ename,sal,comm from emp where comm is not null;
			+-------+--------+---------+---------+
			| empno | ename  | sal     | comm    |
			+-------+--------+---------+---------+
			|  7499 | ALLEN  | 1600.00 |  300.00 |
			|  7521 | WARD   | 1250.00 |  500.00 |
			|  7654 | MARTIN | 1250.00 | 1400.00 |
			|  7844 | TURNER | 1500.00 |    0.00 |
			+-------+--------+---------+---------+
			4 rows in set (0.00 sec)
		
		9.and 并且
		select * from 表 where 字段>'值1' and 字段<'值2';
		
		例如：查询工作岗位是MANAGER并且工资大于 2000 的员工信息
			mysql> select * from emp where job='MANAGER' and sal >= '2000';
			+-------+-------+---------+------+------------+---------+------+--------+
			| EMPNO | ENAME | JOB     | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |
			+-------+-------+---------+------+------------+---------+------+--------+
			|  7566 | JONES | MANAGER | 7839 | 1981-04-02 | 2975.00 | NULL |     20 |
			|  7698 | BLAKE | MANAGER | 7839 | 1981-05-01 | 2850.00 | NULL |     30 |
			|  7782 | CLARK | MANAGER | 7839 | 1981-06-09 | 2450.00 | NULL |     10 |
			+-------+-------+---------+------+------------+---------+------+--------+
			3 rows in set (0.00 sec)
		
		
		10.or 或者
		select * from 表 where 字段='值1' or 字段='值2';
		
		例如：查询工作岗位是MANAGER或者SALESMAN的员工信息
			mysql> select * from emp where job='MANAGER' or job='SALESMAN';
			+-------+--------+----------+------+------------+---------+---------+--------+
			| EMPNO | ENAME  | JOB      | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
			+-------+--------+----------+------+------------+---------+---------+--------+
			|  7499 | ALLEN  | SALESMAN | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
			|  7521 | WARD   | SALESMAN | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
			|  7566 | JONES  | MANAGER  | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |
			|  7654 | MARTIN | SALESMAN | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
			|  7698 | BLAKE  | MANAGER  | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |
			|  7782 | CLARK  | MANAGER  | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |
			|  7844 | TURNER | SALESMAN | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
			+-------+--------+----------+------+------------+---------+---------+--------+
			7 rows in set (0.00 sec)
		
		and和or同时出现的话，优先级问题？
		
		例如：查询一下工资大于2500并且部门编号为10或者20部门的员工
		select * from emp where sal>'2500' and deptno='10' or deptno='20';
		分析以上语句的问题？
			and的优先级高于or
			以上语句会先执行and，然后执行or
			语句的含义是：查询工资大于2500并且部门编号为10的员工信息，
			或者部门编号为20的所以员工信息。
			条件相当于 (sal>'2500' and deptno='10') or (deptno='20')
		执行的结果为
			mysql> select * from emp where sal>'2500' and deptno='10' or deptno='20';
			+-------+-------+-----------+------+------------+---------+------+--------+
			| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |
			+-------+-------+-----------+------+------------+---------+------+--------+
			|  7369 | SMITH | CLERK     | 7902 | 1980-12-17 |  800.00 | NULL |     20 |
			|  7566 | JONES | MANAGER   | 7839 | 1981-04-02 | 2975.00 | NULL |     20 |
			|  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 | NULL |     20 |
			|  7839 | KING  | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL |     10 |
			|  7876 | ADAMS | CLERK     | 7788 | 1987-05-23 | 1100.00 | NULL |     20 |
			|  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 | NULL |     20 |
			+-------+-------+-----------+------+------------+---------+------+--------+
			6 rows in set (0.00 sec)
			
			解决办法，加括号提高优先级
			select * from emp where sal>'2500' and (deptno='10' or deptno='20');
			
				mysql> select * from emp where sal>'2500' and (deptno='10' or deptno='20');
				+-------+-------+-----------+------+------------+---------+------+--------+
				| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |
				+-------+-------+-----------+------+------------+---------+------+--------+
				|  7566 | JONES | MANAGER   | 7839 | 1981-04-02 | 2975.00 | NULL |     20 |
				|  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 | NULL |     20 |
				|  7839 | KING  | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL |     10 |
				|  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 | NULL |     20 |
				+-------+-------+-----------+------+------------+---------+------+--------+
				4 rows in set (0.00 sec)
			
			and和or同时出现，and优先级较高。如果想让or的优先级先执行，需要加小括号；
			以后的开发中，如果不确定优先级，就加小括号就可以了
			
 		
		
		11.in 包含相当于多个or(not in 不在这个范围中)
		SELECT * FROM 表 WHERE 字段 IN ('值1','值2',.....);
		
		例如：查询工作岗位是MANAGER或者SALESMAN的员工信息
			mysql> select * from emp where job in ('MANAGER','SALESMAN');
			+-------+--------+----------+------+------------+---------+---------+--------+
			| EMPNO | ENAME  | JOB      | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
			+-------+--------+----------+------+------------+---------+---------+--------+
			|  7499 | ALLEN  | SALESMAN | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
			|  7521 | WARD   | SALESMAN | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
			|  7566 | JONES  | MANAGER  | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |
			|  7654 | MARTIN | SALESMAN | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
			|  7698 | BLAKE  | MANAGER  | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |
			|  7782 | CLARK  | MANAGER  | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |
			|  7844 | TURNER | SALESMAN | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
			+-------+--------+----------+------+------------+---------+---------+--------+
			7 rows in set (0.00 sec)
			
			注意：in 不是一个区间
		
		例如：查询薪资是800或者5000的员工信息
			mysql> select * from emp where sal in ('800','5000');
			+-------+-------+-----------+------+------------+---------+------+--------+
			| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |
			+-------+-------+-----------+------+------------+---------+------+--------+
			|  7369 | SMITH | CLERK     | 7902 | 1980-12-17 |  800.00 | NULL |     20 |
			|  7839 | KING  | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL |     10 |
			+-------+-------+-----------+------+------------+---------+------+--------+
			2 rows in set (0.00 sec)
			
			not in 表示不在这几个值当中的数据
				mysql> select * from emp where sal not in ('800','5000','3000');
				+-------+--------+----------+------+------------+---------+---------+--------+
				| EMPNO | ENAME  | JOB      | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
				+-------+--------+----------+------+------------+---------+---------+--------+
				|  7499 | ALLEN  | SALESMAN | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
				|  7521 | WARD   | SALESMAN | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
				|  7566 | JONES  | MANAGER  | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |
				|  7654 | MARTIN | SALESMAN | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
				|  7698 | BLAKE  | MANAGER  | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |
				|  7782 | CLARK  | MANAGER  | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |
				|  7844 | TURNER | SALESMAN | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
				|  7876 | ADAMS  | CLERK    | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |
				|  7900 | JAMES  | CLERK    | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |
				|  7934 | MILLER | CLERK    | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |
				+-------+--------+----------+------+------------+---------+---------+--------+
				10 rows in set (0.00 sec)
		
		12.like模糊查询
		支持%或下划线匹配
			%匹配任意个字符(%是一个特殊的符号)
			下划线，一个下划线只能匹配一个字符(下划线也是一个特殊的字符)
		比如我们要查询表中字段名为name字段值为张三的数据(两个sql语句获得的值相等)
		select * from 表 where name like '%三%';
		select * from 表 where name like '张三';
		
		例如，找出名字中含有O的员工信息
			mysql> select ename from emp where ename like '%O%';
			+-------+
			| ename |
			+-------+
			| JONES |
			| SCOTT |
			| FORD  |
			+-------+
			3 rows in set (0.00 sec)
		
		例如，找出名字中以T结尾的员工信息
			mysql> select ename from emp where ename like '%T';
			+-------+
			| ename |
			+-------+
			| SCOTT |
			+-------+
			1 row in set (0.00 sec)
			
		例如，找出名字中以S开始的员工信息
			mysql> select ename from emp where ename like 'S%';
			+-------+
			| ename |
			+-------+
			| SMITH |
			| SCOTT |
			+-------+
			2 rows in set (0.00 sec)
		
		例如，找出名字中第二个字母为A的员工信息
			mysql> select ename from emp where ename like '_A%';
			+--------+
			| ename  |
			+--------+
			| WARD   |
			| MARTIN |
			| JAMES  |
			+--------+
			3 rows in set (0.00 sec)
			
		例如，找出名字中第三个字母为R的员工信息
			mysql> select ename from emp where ename like '__R%';
			+--------+
			| ename  |
			+--------+
			| WARD   |
			| MARTIN |
			| TURNER |
			| FORD   |
			+--------+
			4 rows in set (0.00 sec)
		
		例如，找出名字中第三个字母为R并且最后一个字母不为R的员工信息
			mysql> select ename from emp where (ename like '__R%') and (ename not like '%R');
			+--------+
			| ename  |
			+--------+
			| WARD   |
			| MARTIN |
			| FORD   |
			+--------+
			3 rows in set (0.00 sec)
		
		如何查询字段值含有%或_的数据信息，使用转义字符\
		有一张表
		mysql> select * from t_student;
		+----------+
		| name     |
		+----------+
		| zhangsan |
		| lisi     |
		| wangwu   |
		| jack_son |
		| jack%ma  |
		+----------+
		5 rows in set (0.00 sec)
		现要将jack_son和jack%ma查找出来，则使用转义字符
			mysql> select * from t_student where name like '%\_%';
			+----------+
			| name     |
			+----------+
			| jack_son |
			+----------+
			1 row in set (0.00 sec)

			mysql> select * from t_student where name like '%\%%';
			+---------+
			| name    |
			+---------+
			| jack%ma |
			+---------+
			1 row in set (0.00 sec)
		
		
		
		13.not 可以取非或不是(不在这个范围内一般用于is 和in)
		SELECT * FROM 表 WHERE 字段名 NOT IN('值1','值2',....);
		SELECT * FROM 表 WHERE 字段名 IS NOT null;

15.排序
	1.查询所有员工的薪资，并排序，默认升序
		mysql> select empno,ename,sal from emp order by sal;
		+-------+--------+---------+
		| empno | ename  | sal     |
		+-------+--------+---------+
		|  7369 | SMITH  |  800.00 |
		|  7900 | JAMES  |  950.00 |
		|  7876 | ADAMS  | 1100.00 |
		|  7521 | WARD   | 1250.00 |
		|  7654 | MARTIN | 1250.00 |
		|  7934 | MILLER | 1300.00 |
		|  7844 | TURNER | 1500.00 |
		|  7499 | ALLEN  | 1600.00 |
		|  7782 | CLARK  | 2450.00 |
		|  7698 | BLAKE  | 2850.00 |
		|  7566 | JONES  | 2975.00 |
		|  7788 | SCOTT  | 3000.00 |
		|  7902 | FORD   | 3000.00 |
		|  7839 | KING   | 5000.00 |
		+-------+--------+---------+
		14 rows in set (0.01 sec)
	2.怎么降序排列
		指定降序：
		mysql> select empno,ename,sal from emp order by sal desc;
		+-------+--------+---------+
		| empno | ename  | sal     |
		+-------+--------+---------+
		|  7839 | KING   | 5000.00 |
		|  7788 | SCOTT  | 3000.00 |
		|  7902 | FORD   | 3000.00 |
		|  7566 | JONES  | 2975.00 |
		|  7698 | BLAKE  | 2850.00 |
		|  7782 | CLARK  | 2450.00 |
		|  7499 | ALLEN  | 1600.00 |
		|  7844 | TURNER | 1500.00 |
		|  7934 | MILLER | 1300.00 |
		|  7521 | WARD   | 1250.00 |
		|  7654 | MARTIN | 1250.00 |
		|  7876 | ADAMS  | 1100.00 |
		|  7900 | JAMES  |  950.00 |
		|  7369 | SMITH  |  800.00 |
		+-------+--------+---------+
		14 rows in set (0.00 sec)
		
		指定升序：
		mysql> select empno,ename,sal from emp order by sal asc;
		+-------+--------+---------+
		| empno | ename  | sal     |
		+-------+--------+---------+
		|  7369 | SMITH  |  800.00 |
		|  7900 | JAMES  |  950.00 |
		|  7876 | ADAMS  | 1100.00 |
		|  7521 | WARD   | 1250.00 |
		|  7654 | MARTIN | 1250.00 |
		|  7934 | MILLER | 1300.00 |
		|  7844 | TURNER | 1500.00 |
		|  7499 | ALLEN  | 1600.00 |
		|  7782 | CLARK  | 2450.00 |
		|  7698 | BLAKE  | 2850.00 |
		|  7566 | JONES  | 2975.00 |
		|  7788 | SCOTT  | 3000.00 |
		|  7902 | FORD   | 3000.00 |
		|  7839 | KING   | 5000.00 |
		+-------+--------+---------+
		14 rows in set (0.00 sec)
	2.可以两个字段排序吗？或者说按照多个字段排序
	查询员工名字和薪资，要求按照薪资升序，如果薪资一样，按照名字升序拍
		mysql> select empno,ename,sal from emp order by sal asc,ename asc; 
		// sal在前，起主导，只有sal相等的时候，ename才发挥作用，按照升序排列
		+-------+--------+---------+
		| empno | ename  | sal     |
		+-------+--------+---------+
		|  7369 | SMITH  |  800.00 |
		|  7900 | JAMES  |  950.00 |
		|  7876 | ADAMS  | 1100.00 |
		|  7654 | MARTIN | 1250.00 |
		|  7521 | WARD   | 1250.00 |
		|  7934 | MILLER | 1300.00 |
		|  7844 | TURNER | 1500.00 |
		|  7499 | ALLEN  | 1600.00 |
		|  7782 | CLARK  | 2450.00 |
		|  7698 | BLAKE  | 2850.00 |
		|  7566 | JONES  | 2975.00 |
		|  7902 | FORD   | 3000.00 |
		|  7788 | SCOTT  | 3000.00 |
		|  7839 | KING   | 5000.00 |
		+-------+--------+---------+
		14 rows in set (0.00 sec)
	3.了解，根据字段的位置也可以排序
		mysql> select empno,ename,sal from emp order by 2 asc;
		// 2表示第2列，整个表格按照查询结果的第2列升序排列
		// 不建议这样写，因为不健壮
		// 因为列的顺序很容易发生改变，列顺序修改以后，2就不可以了
		+-------+--------+---------+
		| empno | ename  | sal     |
		+-------+--------+---------+
		|  7876 | ADAMS  | 1100.00 |
		|  7499 | ALLEN  | 1600.00 |
		|  7698 | BLAKE  | 2850.00 |
		|  7782 | CLARK  | 2450.00 |
		|  7902 | FORD   | 3000.00 |
		|  7900 | JAMES  |  950.00 |
		|  7566 | JONES  | 2975.00 |
		|  7839 | KING   | 5000.00 |
		|  7654 | MARTIN | 1250.00 |
		|  7934 | MILLER | 1300.00 |
		|  7788 | SCOTT  | 3000.00 |
		|  7369 | SMITH  |  800.00 |
		|  7844 | TURNER | 1500.00 |
		|  7521 | WARD   | 1250.00 |
		+-------+--------+---------+
		14 rows in set (0.00 sec)
	4.综合案例：
		找出工资在1250-3000的员工信息，要求按照薪资降序排列
			mysql> select * from emp where sal between '1250' and '3000' order by sal desc;
			// 关键字顺序不能变
			// select ... from ... where ... order by ...
			+-------+--------+----------+------+------------+---------+---------+--------+
			| EMPNO | ENAME  | JOB      | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
			+-------+--------+----------+------+------------+---------+---------+--------+
			|  7788 | SCOTT  | ANALYST  | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |
			|  7902 | FORD   | ANALYST  | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |
			|  7566 | JONES  | MANAGER  | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |
			|  7698 | BLAKE  | MANAGER  | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |
			|  7782 | CLARK  | MANAGER  | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |
			|  7499 | ALLEN  | SALESMAN | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
			|  7844 | TURNER | SALESMAN | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
			|  7934 | MILLER | CLERK    | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |
			|  7521 | WARD   | SALESMAN | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
			|  7654 | MARTIN | SALESMAN | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
			+-------+--------+----------+------+------------+---------+---------+--------+
			10 rows in set (0.00 sec)
			
			以上语句的执行顺序必须掌握：
				第一步：from
				第二步：where
				第三步：select
				第四步：order by(排序总是在最后执行)

16.数据处理函数
	1.数据处理函数又被称为单行处理函数
		单行处理函数的特点：一个输入对应一个输出
		和单行处理函数相对的是：多行处理函数(多行处理函数特点：多个输入对应一个输出)
	2.常见的单行处理函数
		1. lower 转换小写
		例如，将员工姓名全部转换成小写 
			mysql> select lower(ename) as ename from emp;
			+--------+
			| ename  |
			+--------+
			| smith  |
			| allen  |
			| ward   |
			| jones  |
			| martin |
			| blake  |
			| clark  |
			| scott  |
			| king   |
			| turner |
			| adams  |
			| james  |
			| ford   |
			| miller |
			+--------+
			14 rows in set (0.00 sec)
			
			14个输入，最后还是14个输出，这是单行处理的特点
		
		2. upper 转换大写
		例如，将t_student中字段为name的值全部改大写
			mysql> select * from t_student;
			+----------+
			| name     |
			+----------+
			| zhangsan |
			| lisi     |
			| wangwu   |
			| jack_son |
			| jack%ma  |
			+----------+
			5 rows in set (0.00 sec)

			mysql> select upper(name) name from t_student;
			+----------+
			| name     |
			+----------+
			| ZHANGSAN |
			| LISI     |
			| WANGWU   |
			| JACK_SON |
			| JACK%MA  |
			+----------+
			5 rows in set (0.00 sec)
		
		3.substr取子串(被截取的字符串,起始下标,截取的长度)
		例如：所有员工的姓名取前两位输出
			mysql> select substr(ename,1,2) ename from emp;
			+-------+
			| ename |
			+-------+
			| SM    |
			| AL    |
			| WA    |
			| JO    |
			| MA    |
			| BL    |
			| CL    |
			| SC    |
			| KI    |
			| TU    |
			| AD    |
			| JA    |
			| FO    |
			| MI    |
			+-------+
			14 rows in set (0.00 sec)
		注意：起始下标从1开始，没有0
		
		例如，找出员工姓名中第一个字母为A的员工信息
			方式一：模糊查询
				mysql> select * from emp where ename like 'A%';
				+-------+-------+----------+------+------------+---------+--------+--------+
				| EMPNO | ENAME | JOB      | MGR  | HIREDATE   | SAL     | COMM   | DEPTNO |
				+-------+-------+----------+------+------------+---------+--------+--------+
				|  7499 | ALLEN | SALESMAN | 7698 | 1981-02-20 | 1600.00 | 300.00 |     30 |
				|  7876 | ADAMS | CLERK    | 7788 | 1987-05-23 | 1100.00 |   NULL |     20 |
				+-------+-------+----------+------+------------+---------+--------+--------+
				2 rows in set (0.00 sec)
			方式二：使用单行函数substr处理
				mysql> select * from emp where substr(ename,1,1)='A';
				+-------+-------+----------+------+------------+---------+--------+--------+
				| EMPNO | ENAME | JOB      | MGR  | HIREDATE   | SAL     | COMM   | DEPTNO |
				+-------+-------+----------+------+------------+---------+--------+--------+
				|  7499 | ALLEN | SALESMAN | 7698 | 1981-02-20 | 1600.00 | 300.00 |     30 |
				|  7876 | ADAMS | CLERK    | 7788 | 1987-05-23 | 1100.00 |   NULL |     20 |
				+-------+-------+----------+------+------------+---------+--------+--------+
				2 rows in set (0.00 sec)
		
		例如，将t_student中姓名中第一个字母变大写
			// 使用了字符串拼接函数concat
			mysql> select concat(upper(substr(name,1,1)),substr(name,2,length(name)-1)) as name from t_student;
			+----------+
			| name     |
			+----------+
			| Zhangsan |
			| Lisi     |
			| Wangwu   |
			| Jack_son |
			| Jack%ma  |
			+----------+
			5 rows in set (0.00 sec)
		
		4.length 取长度
		例如：计算emp表格中员工姓名的长度
			mysql> select length(ename) as ename from emp;
			+-------+
			| ename |
			+-------+
			|     5 |
			|     5 |
			|     4 |
			|     5 |
			|     6 |
			|     5 |
			|     5 |
			|     5 |
			|     4 |
			|     6 |
			|     5 |
			|     5 |
			|     4 |
			|     6 |
			+-------+
			14 rows in set (0.00 sec)
			
		5.trim 去空格，去除前后空格
		例如：查询姓名为KING的员工
			mysql> select * from emp where ename=' KING   ';
			Empty set (0.00 sec)

			mysql> select * from emp where ename=trim(' KING   ');
			+-------+-------+-----------+------+------------+---------+------+--------+
			| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |
			+-------+-------+-----------+------+------------+---------+------+--------+
			|  7839 | KING  | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL |     10 |
			+-------+-------+-----------+------+------------+---------+------+--------+
			1 row in set (0.00 sec)
		6.str_to_date 将字符串转换成日期
		7.date_format 格式化日期
		例如：将HIREDATE的时间格式进行转换
			mysql> select date_format(HIREDATE,'%b %d %Y') from emp;
			+----------------------------------+
			| date_format(HIREDATE,'%b %d %Y') |
			+----------------------------------+
			| Dec 17 1980                      |
			| Feb 20 1981                      |
			| Feb 22 1981                      |
			| Apr 02 1981                      |
			| Sep 28 1981                      |
			| May 01 1981                      |
			| Jun 09 1981                      |
			| Apr 19 1987                      |
			| Nov 17 1981                      |
			| Sep 08 1981                      |
			| May 23 1987                      |
			| Dec 03 1981                      |
			| Dec 03 1981                      |
			| Jan 23 1982                      |
			+----------------------------------+
			14 rows in set (0.00 sec)
		8.format 设置千分位
		SELECT FORMAT(column_name,format) FROM table_name
			mysql> select ename,sal,format(NOW(),'%Y-%m-%d') as date from emp;
			+--------+---------+--------------------+
			| ename  | sal     | date               |
			+--------+---------+--------------------+
			| SMITH  |  800.00 | 20,210,508,230,016 |
			| ALLEN  | 1600.00 | 20,210,508,230,016 |
			| WARD   | 1250.00 | 20,210,508,230,016 |
			| JONES  | 2975.00 | 20,210,508,230,016 |
			| MARTIN | 1250.00 | 20,210,508,230,016 |
			| BLAKE  | 2850.00 | 20,210,508,230,016 |
			| CLARK  | 2450.00 | 20,210,508,230,016 |
			| SCOTT  | 3000.00 | 20,210,508,230,016 |
			| KING   | 5000.00 | 20,210,508,230,016 |
			| TURNER | 1500.00 | 20,210,508,230,016 |
			| ADAMS  | 1100.00 | 20,210,508,230,016 |
			| JAMES  |  950.00 | 20,210,508,230,016 |
			| FORD   | 3000.00 | 20,210,508,230,016 |
			| MILLER | 1300.00 | 20,210,508,230,016 |
			+--------+---------+--------------------+
			14 rows in set, 14 warnings (0.00 sec)
		
		9.round 四舍五入
			mysql> select 2100 as num from dept;
			+------+
			| num  |
			+------+
			| 2100 |
			| 2100 |
			| 2100 |
			| 2100 |
			+------+
			4 rows in set (0.00 sec)
		结论：select 后面可以跟某个表的字段名，也可以跟字面量/字面值(数据)
			mysql> select round( '123.456',2) as result from emp;
			+--------+
			| result |
			+--------+
			| 123.46 |
			| 123.46 |
			| 123.46 |
			| 123.46 |
			| 123.46 |
			| 123.46 |
			| 123.46 |
			| 123.46 |
			| 123.46 |
			| 123.46 |
			| 123.46 |
			| 123.46 |
			| 123.46 |
			| 123.46 |
			+--------+
			14 rows in set (0.00 sec)
			
			例如：将员工的工资四舍五入取整
			// 注意round函数四舍五入存在一些问题
				mysql> select sal,round(sal,-2) from emp;
				+---------+---------------+
				| sal     | round(sal,-2) |
				+---------+---------------+
				|  800.00 |           800 |
				| 1600.00 |          1600 |
				| 1250.00 |          1200 |
				| 2975.00 |          3000 |
				| 1250.00 |          1200 |
				| 2850.00 |          2800 |
				| 2450.00 |          2400 |
				| 3000.00 |          3000 |
				| 5000.00 |          5000 |
				| 1500.00 |          1500 |
				| 1100.00 |          1100 |
				|  950.00 |          1000 |
				| 3000.00 |          3000 |
				| 1300.00 |          1300 |
				+---------+---------------+
				14 rows in set (0.00 sec)
		
		10.rand 生成随机数
		例如：取100以内的随机数
			mysql> select round(rand()*100) rand from emp;
			+------+
			| rand |
			+------+
			|   24 |
			|   24 |
			|   49 |
			|   74 |
			|   23 |
			|   90 |
			|   84 |
			|   51 |
			|    1 |
			|   53 |
			|   63 |
			|   56 |
			|   89 |
			|   79 |
			+------+
			14 rows in set (0.01 sec)
		11.ifnull 空处理函数 可以将null 转换成一个具体值
		在所有数据库当中，只要有null参与的数据运算，结果都为null
		
		例如：计算每个员工的月薪，计算公式：工资 = (月薪+补助);
			mysql> select ename,sal+comm as salary from emp;
			+--------+---------+
			| ename  | salary  |
			+--------+---------+
			| SMITH  |    NULL |
			| ALLEN  | 1900.00 |
			| WARD   | 1750.00 |
			| JONES  |    NULL |
			| MARTIN | 2650.00 |
			| BLAKE  |    NULL |
			| CLARK  |    NULL |
			| SCOTT  |    NULL |
			| KING   |    NULL |
			| TURNER | 1500.00 |
			| ADAMS  |    NULL |
			| JAMES  |    NULL |
			| FORD   |    NULL |
			| MILLER |    NULL |
			+--------+---------+
			14 rows in set (0.00 sec)
			
		注意：null只要参与运算，最后结果一定是null。为了避免这个结果，需要使用ifnull函数处理
			ifnull的用法：ifnull(数据，要替换的值);
			
			例如：计算每个员工的年薪，计算公式：年薪 = (月薪+补助)*12;
				mysql> select ename,(sal+ifnull(comm,'0'))*12 from emp;
				+--------+---------------------------+
				| ename  | (sal+ifnull(comm,'0'))*12 |
				+--------+---------------------------+
				| SMITH  |                      9600 |
				| ALLEN  |                     22800 |
				| WARD   |                     21000 |
				| JONES  |                     35700 |
				| MARTIN |                     31800 |
				| BLAKE  |                     34200 |
				| CLARK  |                     29400 |
				| SCOTT  |                     36000 |
				| KING   |                     60000 |
				| TURNER |                     18000 |
				| ADAMS  |                     13200 |
				| JAMES  |                     11400 |
				| FORD   |                     36000 |
				| MILLER |                     15600 |
				+--------+---------------------------+
				14 rows in set (0.00 sec)
	12.case...when...then...when...then...else...end
	
	例如：当员工的工作岗位为MANAGER的时候，工资上调10%，
	员工的工作岗位为SALESMAN的时候，工资上调50%
	(注意，不修改数据库，只是将查询结果显示的工资上调)
		mysql> select ename,job,sal as 'original sal',case job when 'MANAGER' then sal*1.1 when 'SALESMAN' then sal*1.5 else sal end as 'increase salary'from emp ;
		+--------+-----------+--------------+-----------------+
		| ename  | job       | original sal | increase salary |
		+--------+-----------+--------------+-----------------+
		| SMITH  | CLERK     |       800.00 |          800.00 |
		| ALLEN  | SALESMAN  |      1600.00 |         2400.00 |
		| WARD   | SALESMAN  |      1250.00 |         1875.00 |
		| JONES  | MANAGER   |      2975.00 |         3272.50 |
		| MARTIN | SALESMAN  |      1250.00 |         1875.00 |
		| BLAKE  | MANAGER   |      2850.00 |         3135.00 |
		| CLARK  | MANAGER   |      2450.00 |         2695.00 |
		| SCOTT  | ANALYST   |      3000.00 |         3000.00 |
		| KING   | PRESIDENT |      5000.00 |         5000.00 |
		| TURNER | SALESMAN  |      1500.00 |         2250.00 |
		| ADAMS  | CLERK     |      1100.00 |         1100.00 |
		| JAMES  | CLERK     |       950.00 |          950.00 |
		| FORD   | ANALYST   |      3000.00 |         3000.00 |
		| MILLER | CLERK     |      1300.00 |         1300.00 |
		+--------+-----------+--------------+-----------------+
		14 rows in set (0.00 sec)

17.分组函数(多行处理函数)
	多行函数的特点：输入多行，最终输出一行
	常用的分组函数：
		1.count 计数
		例如，计算有多少个员工
			mysql> select count(ename) from emp;
			+--------------+
			| count(ename) |
			+--------------+
			|           14 |
			+--------------+
			1 row in set (0.00 sec)
		2.sum 求和
		例如：计算员工的薪资总和
			mysql> select sum(sal) from emp;
			+----------+
			| sum(sal) |
			+----------+
			| 29025.00 |
			+----------+
			1 row in set (0.00 sec)
		3.avg 平均值
		例如：计算员工的薪资的平均值
			mysql> select avg(sal) from emp;
			+-------------+
			| avg(sal)    |
			+-------------+
			| 2073.214286 |
			+-------------+
			1 row in set (0.00 sec)
		4.max 最大值
		例如：计算员工的薪资的最大值
			mysql> select max(sal) from emp;
			+----------+
			| max(sal) |
			+----------+
			|  5000.00 |
			+----------+
			1 row in set (0.00 sec)
		5.min 最小值
			mysql> select min(sal) from emp;
			+----------+
			| min(sal) |
			+----------+
			|   800.00 |
			+----------+
			1 row in set (0.00 sec)
		例如：计算员工的薪资的最小值
		
	注意：分组函数在使用的时候必须先进行分组，然后才能用。
	如果没有对数据进行分组，则整张表默认一个分组
	
	分组函数在使用的过程中，需要注意哪些？
		1.分组函数自动忽略null，不需要提前对null进行处理
			mysql> select sum(comm) from emp;
			或
			select sum(ifnull(comm,0)) from emp;
			+-----------+
			| sum(comm) |
			+-----------+
			|   2200.00 |
			+-----------+
			1 row in set (0.00 sec)
			
			mysql> select count(comm) from emp;
			+-------------+
			| count(comm) |
			+-------------+
			|           4 |
			+-------------+
			1 row in set (0.00 sec)
			
			mysql> select avg(comm) from emp;
			+------------+
			| avg(comm)  |
			+------------+
			| 550.000000 |
			+------------+
			1 row in set (0.00 sec)
		2.分组函数中，count(*)和count(具体字段)有什么区别？
			mysql> select count(*),count(comm) from emp;
			+----------+-------------+
			| count(*) | count(comm) |
			+----------+-------------+
			|       14 |           4 |
			+----------+-------------+
			1 row in set (0.00 sec)
			
			count(具体字段)：表示统计该字段下所有不为null的元素总数
			count(*)：统计表当中的总行数，只要有一行数据，则count++
		3.分组函数不能直接使用在where子句中
		例如：找出比最低工资高的员工信息
		错误写法：
			mysql> select ename,sal from emp where sal>min(sal);
			ERROR 1111 (HY000): Invalid use of group function
		分组查询：group by
		4.所有的分组函数可以组合起来一起使用
			mysql> select sum(sal),min(sal),max(sal),avg(sal),count(*) from emp;
			+----------+----------+----------+-------------+----------+
			| sum(sal) | min(sal) | max(sal) | avg(sal)    | count(*) |
			+----------+----------+----------+-------------+----------+
			| 29025.00 |   800.00 |  5000.00 | 2073.214286 |       14 |
			+----------+----------+----------+-------------+----------+
			1 row in set (0.00 sec)

19.分组查询(非常重要)
	1.什么是分组查询？在实际的应用中，可能有这样的需求，需要先进行分组，然后对每一组数据进行操作
		select... from... group by ...
		
		例如：计算每个部门的工资和？
		
		例如：计算每个工作岗位的平均薪资？
		
		例如：计算每个工作岗位的最高薪资？
	
	2.将之前的关键字全部组合在一起，看一下执行顺序？
		select... from... where... group by... order by...
		以上关键字的顺序不能颠倒，需要记忆。
		执行顺序是什么？
			1.from
			2.where
			3.group by
			4.select
			5.order by
		
		为什么分组函数不能直接使用在where后面？
			mysql> select ename,sal from emp where sal>min(sal); //爆错
			因为分组函数在使用的时候，必须先分组之后才能使用。
			where执行的时候，还没有分组，所以where后面不能出现分组函数。
			
			select sum(sal) from emp;
			这个没有分组，为啥sum()函数可以使用呢？
			 因为select在group by之后执行
	3.案例
	
	找出每个工作岗位的工资和？
		实现思路：按照工作岗位分子，然后对分组求和
			mysql> select job,sum(sal) from emp group by job;
			+-----------+----------+
			| job       | sum(sal) |
			+-----------+----------+
			| CLERK     |  4150.00 |
			| SALESMAN  |  5600.00 |
			| MANAGER   |  8275.00 |
			| ANALYST   |  6000.00 |
			| PRESIDENT |  5000.00 |
			+-----------+----------+
			5 rows in set (0.00 sec)
		以上这个语句的执行顺序：
			先从emp表中查询数据，根据job字段进行分组，然后对每一组的数据进行求和
		重点结论：在一条select语句中，如果有group by语句的话，
			select后面只能跟：参加分组的字段，以及分组函数。
			其他的字段一律不能跟。
	
	找出每个部门的最高薪资？
		实现思路：按照部门编号分组，然后查找每一组的最大值
			mysql> select deptno,max(sal) from emp group by deptno;
			+--------+----------+
			| deptno | max(sal) |
			+--------+----------+
			|     20 |  3000.00 |
			|     30 |  2850.00 |
			|     10 |  5000.00 |
			+--------+----------+
			3 rows in set (0.00 sec)
	
	找出每个部门不同岗位的最高薪资？
		实现思路：利用多个字段进行分组，查找，排序
			mysql> select deptno,job,max(sal) from emp group by deptno,job order by deptno,job;
			+--------+-----------+----------+
			| deptno | job       | max(sal) |
			+--------+-----------+----------+
			|     10 | CLERK     |  1300.00 |
			|     10 | MANAGER   |  2450.00 |
			|     10 | PRESIDENT |  5000.00 |
			|     20 | ANALYST   |  3000.00 |
			|     20 | CLERK     |  1100.00 |
			|     20 | MANAGER   |  2975.00 |
			|     30 | CLERK     |   950.00 |
			|     30 | MANAGER   |  2850.00 |
			|     30 | SALESMAN  |  1600.00 |
			+--------+-----------+----------+
			9 rows in set (0.00 sec)
	
	找出每个部门的最高薪资，要求显示最高薪资大于800的员工信息？
		实现思路：先把大于800的都找出来，然后在分组
			第一步：求薪资大于800的员工
				mysql> select sal from emp where sal>'800';
				+---------+
				| sal     |
				+---------+
				| 1600.00 |
				| 1250.00 |
				| 2975.00 |
				| 1250.00 |
				| 2850.00 |
				| 2450.00 |
				| 3000.00 |
				| 5000.00 |
				| 1500.00 |
				| 1100.00 |
				|  950.00 |
				| 3000.00 |
				| 1300.00 |
				+---------+
				13 rows in set (0.00 sec)

			第二步：将此数据按照deptno分组，并求每组的最大值
				mysql> select deptno,max(sal) from emp where sal>'800' group by deptno order by deptno;
				+--------+----------+
				| deptno | max(sal) |
				+--------+----------+
				|     10 |  5000.00 |
				|     20 |  3000.00 |
				|     30 |  2850.00 |
				+--------+----------+
				3 rows in set (0.00 sec)
			
	找出每个部门的平均薪资，要求显示平均薪资高于2500的？
		实现思路：使用group by结合having 搭配使用，having相当于在group by的基础上进一步过滤
		
		mysql> select deptno,avg(sal) from emp group by deptno having avg(sal)>'2500';
		+--------+-------------+
		| deptno | avg(sal)    |
		+--------+-------------+
		|     10 | 2916.666667 |
		+--------+-------------+
		1 row in set (0.01 sec)
		
		优化策略：where和having，优先选择使用where，where实在完成不了，在选择having。
		因为使用having的效率较低
19.大总结(单表查询)
	select 
		...
	from
		...
	where
		...
	group by
		...
	having
		...
	order by
		...
	
	以上关键字的顺序不能颠倒。
	执行顺序：
		1.from
		2.where
		3.group by
		4.having
		5.select
		6.order by
	
	从某张表中查询数据，
	先经过where条件筛选出有价值的数据
	对这些有价值的数据分组，分组之后可以使用having继续筛选
	select查询出来
	最后排序输出
	
	例如：找出每个岗位的平均薪资，显示平均薪资大于1500的，除MANAGER之外，要求按照平均薪资降序排列？
		mysql> 
			select 
				job,avg(sal) 
			from 
				emp 
			where 
				job <> 'MANAGER'
			group by 
				job 
			having 
				avg(sal)>'1500' 
			order by 
				avg(sal) 
			desc;
			+-----------+-------------+
			| job       | avg(sal)    |
			+-----------+-------------+
			| PRESIDENT | 5000.000000 |
			| ANALYST   | 3000.000000 |
			+-----------+-------------+
			2 rows in set (0.01 sec)
	
